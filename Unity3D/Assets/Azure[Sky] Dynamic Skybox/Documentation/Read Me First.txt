[v4.3.0]
This new update brings some transparent shaders already edited to work with the fog scattering effect of the Standard Sky System.
Instead of using Unity's transparent shaders, you must set to your materials the alternative Azure's versions addressed at:
Azure[Sky]/BuiltIn/...


As you read these instructions, you can at the same time follow the Unlit-Alpha(Azure[Sky]/BuiltIn/Unlit/Transparent) shader code that came with the package to see how the code was modified.


//////////////////////////////////////////////////////
/// Adding transparency support to custom shaders. ///
//////////////////////////////////////////////////////

1ª: Add this line of code shortly after the CGPROGRAM starts.
#include "AzureFogCore.cginc"



2ª: Add 2 TEXCOORD definition to the "vertex to pixel" shader struct to reconstruct the world position and project the fog data over the object.
Exemple1:
struct v2f
{
	float4 projPos : TEXCOORD0; // This is the first TEXCOORD.
	float3 worldPos : TEXCOORD1; // This is the second TEXCOORD.
};

Exemple2:
struct v2f
{
	float4 vertex : SV_POSITION;
	float2 texcoord : TEXCOORD0;
	UNITY_FOG_COORDS(1)
	float4 projPos : TEXCOORD2; // This is the first next free TEXCOORD definition.
	float3 worldPos : TEXCOORD3; // This is the second next free TEXCOORD definition.
	UNITY_VERTEX_OUTPUT_STEREO
};



3ª: Now in the vertex shader, it is necessary to calculate the projection position and store this information in the first TEXCOORD that we created.
Add this two lines to your vertex shader:
o.projPos = ComputeScreenPos(o.vertex); // o.vertex is the SV_POSITION definition from "vertex to pixel" struct, change to your own definition if you used a different nomenclature.
COMPUTE_EYEDEPTH(o.projPos.z);

It is also necessary to calculate the world position and store in the second TEXCOORD that we have created.
Add this line to your vertex shader:
o.worldPos = mul(unity_ObjectToWorld, v.vertex); // v.vertex is the vertex POSITION, change to your own definition if you used a different nomenclature.

Exemple1:
v2f vert (appdata_t v)
{
	v2f o;
	o.vertex = UnityObjectToClipPos(v.vertex);
	o.projPos = ComputeScreenPos(o.vertex);
	COMPUTE_EYEDEPTH(o.projPos.z);
	o.worldPos = mul(unity_ObjectToWorld, v.vertex);
	return o;
}

Exemple2:
v2f vert (appdata_t v)
{
	v2f o;
	UNITY_SETUP_INSTANCE_ID(v);
	UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
	o.vertex = UnityObjectToClipPos(v.vertex);
	o.texcoord = TRANSFORM_TEX(v.texcoord, _MainTex);

	o.projPos = ComputeScreenPos(o.vertex);
	COMPUTE_EYEDEPTH(o.projPos.z);
	o.worldPos = mul(unity_ObjectToWorld, v.vertex);

	UNITY_TRANSFER_FOG(o,o.vertex);
	return o;
}



4ª: And last but not least, you need to apply the fog color to the output color of the fragment shader(also known as pixel shader). Using the following command:
ApplyAzureFog (float4 fragOutput, float4 projPos, float3 worldPos)
- In the 1º argument you need to define the output of your pixel shader.
- In the 2º argument you need to define the TEXCOORD from the "vertex to pixel" struct that stores the projection position data.
- In the 3º argument you need to define the TEXCOORD from the "vertex to pixel" struct that stores the world position data.

Exemple1: Fragment shader without modifications.
fixed4 frag (v2f i) : SV_Target
{
	fixed4 col = tex2D(_MainTex, i.texcoord);
	UNITY_APPLY_FOG(i.fogCoord, col);
	return col;
}

Exemple2:
fixed4 frag (v2f i) : SV_Target
{
	fixed4 col = tex2D(_MainTex, i.texcoord);
	UNITY_APPLY_FOG(i.fogCoord, col);

	col = ApplyAzureFog(col, i.projPos, i.worldPos);
	return col;
}

Exemple3: Example 2 with the simplified code.
fixed4 frag (v2f i) : SV_Target
{
	fixed4 col = tex2D(_MainTex, i.texcoord);
	UNITY_APPLY_FOG(i.fogCoord, col);
	return ApplyAzureFog(col, i.projPos, i.worldPos);
}